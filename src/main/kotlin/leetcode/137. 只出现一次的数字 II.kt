package leetcode

/*
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。

说明：
你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:
输入: [2,2,3,2]
输出: 3

示例 2:
输入: [0,1,0,1,0,1,99]
输出: 99

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/single-number-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
/**
 * 思路:
 * 定义一种位运算方式，在对同一个位进行三个运算后，能归零
 * 1.考虑 xor
 * 位上的数为1：三次后会变成1 四次后会变成0
 * 1 (xor 1)-> 0 (xor 1)-> 1 (xor 1)-> 0
 * 位上的数为0：三次后会变成0 四次后会变成0
 * 0 (xor 0)-> 0 (xor 0)-> 0 (xor 0)-> 0
 *
 * 但是要的是三次后1变成0 四次后1变成1
 *
 * 2.考虑用两个数来定义一种三进制，每个数用a,b对应的二进制位组成
 * a,b的二进制位记录出现的次数，因为题中限制了只能出现三次或四次
 * 所以a,b两个数足够了，设a为高位，b为低位
 * 位上的1：三次后变成 00 四次后变成01 过程应该是 00 -> 01 -> 10 -> 00
 * 位上的0：三次后变成 00 四次后变成00
 *
 * 核心：如果用位运算实现 00 -> 01 -> 10 -> 00
 * a b n    ab  b=~a&(b^n) a=~b&(a^n)
 * 0 0 1 -> 01
 * 0 1 1 -> 10
 * 1 0 1 -> 00
 * 0 0 0 -> 00
 * 0 1 0 -> 01
 * 1 0 0 -> 10
 */
private fun singleNumber(nums: IntArray): Int {
    var (a, b) = 0 to 0
    for (n in nums) {
        b = a.inv().and(b.xor(n))
        a = b.inv().and(a.xor(n))
    }
    return b
}

fun main() {
    println(singleNumber(intArrayOf(2, 2, 3, 2)))
    println(singleNumber(intArrayOf(0, 1, 0, 1, 0, 1, 99)))
}